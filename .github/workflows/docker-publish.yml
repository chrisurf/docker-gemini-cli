name: Build and Publish Docker Image

on:
push:
branches: [ main, develop ]
tags: [ ‘v*’ ]
pull_request:
branches: [ main ]

env:
REGISTRY: docker.io
IMAGE_NAME: gemini-autonomous-agent

jobs:
test:
runs-on: ubuntu-latest
steps:
- name: Checkout repository
  uses: actions/checkout@v4

- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: '3.11'

- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
    pip install pytest pytest-cov pytest-asyncio flake8 black isort

- name: Lint with flake8
  run: |
    flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
    flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

- name: Format check with black
  run: black --check src/

- name: Import sorting check with isort
  run: isort --check-only src/

- name: Run tests
  run: |
    pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
  env:
    GEMINI_API_KEY: fake_key_for_testing

- name: Upload coverage to Codecov
  uses: codecov/codecov-action@v3
  with:
    file: ./coverage.xml

security-scan:
runs-on: ubuntu-latest
steps:
- name: Checkout repository
  uses: actions/checkout@v4

- name: Run Trivy vulnerability scanner
  uses: aquasecurity/trivy-action@master
  with:
    scan-type: 'fs'
    scan-ref: '.'
    format: 'sarif'
    output: 'trivy-results.sarif'

- name: Upload Trivy scan results to GitHub Security tab
  uses: github/codeql-action/upload-sarif@v2
  with:
    sarif_file: 'trivy-results.sarif'

docker-build-test:
runs-on: ubuntu-latest
needs: [test, security-scan]
steps:
- name: Checkout repository
  uses: actions/checkout@v4

- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3

- name: Build Docker image for testing
  uses: docker/build-push-action@v5
  with:
    context: .
    push: false
    tags: ${{ env.IMAGE_NAME }}:test
    cache-from: type=gha
    cache-to: type=gha,mode=max

- name: Test Docker image
  run: |
    # Create test environment
    mkdir -p test_data/{input,output}
    
    # Test container startup
    docker run --rm -d \
      --name gemini-test \
      -e GEMINI_API_KEY=fake_key \
      -v $(pwd)/test_data:/app/data \
      ${{ env.IMAGE_NAME }}:test shell
    
    # Wait for container to be ready
    sleep 5
    
    # Test health check
    docker exec gemini-test python src/health_check.py || true
    
    # Cleanup
    docker stop gemini-test || true

- name: Run container structure tests
  run: |
    curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
    chmod +x container-structure-test-linux-amd64
    sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
    container-structure-test test --image ${{ env.IMAGE_NAME }}:test --config tests/container-structure-test.yaml

publish:
runs-on: ubuntu-latest
needs: [docker-build-test]
if: github.event_name != ‘pull_request’

steps:
- name: Checkout repository
  uses: actions/checkout@v4

- name: Set up Docker Buildx
  uses: docker/setup-buildx-action@v3

- name: Log in to Docker Hub
  uses: docker/login-action@v3
  with:
    username: ${{ secrets.DOCKERHUB_USERNAME }}
    password: ${{ secrets.DOCKERHUB_TOKEN }}

- name: Extract metadata
  id: meta
  uses: docker/metadata-action@v5
  with:
    images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
    tags: |
      type=ref,event=branch
      type=ref,event=pr
      type=semver,pattern={{version}}
      type=semver,pattern={{major}}.{{minor}}
      type=raw,value=latest,enable={{is_default_branch}}

- name: Build and push Docker image
  uses: docker/build-push-action@v5
  with:
    context: .
    platforms: linux/amd64,linux/arm64
    push: true
    tags: ${{ steps.meta.outputs.tags }}
    labels: ${{ steps.meta.outputs.labels }}
    cache-from: type=gha
    cache-to: type=gha,mode=max

- name: Update Docker Hub description
  uses: peter-evans/dockerhub-description@v3
  with:
    username: ${{ secrets.DOCKERHUB_USERNAME }}
    password: ${{ secrets.DOCKERHUB_TOKEN }}
    repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
    readme-filepath: ./README.md

notify:
runs-on: ubuntu-latest
needs: [publish]
if: always()
steps:
- name: Notify on success
if: needs.publish.result == ‘success’
run: echo “✅ Docker image published successfully!”

- name: Notify on failure
  if: needs.publish.result == 'failure'
  run: echo "❌ Docker image publication failed!"
